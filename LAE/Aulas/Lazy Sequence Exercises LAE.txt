fun <T> Sequence<T>.collapse() : Sequence<T> {
    return sequence {
        var last : T? = null
        for(item in this@collapse) {
            if (last != item) {
                last = item
                yield(item)
            }
        }
    }
}

fun <T> Sequence<T>.interLeave(seq : Sequence<T>) : Sequence<T> {
    return sequence {
        val iter1 = this@interLeave.iterator()
        val iter2 = seq.iterator()
        while (iter1.hasNext() && iter2.hasNext()) {
            val item = iter1.next()
            val item2 = iter2.next()
            yield(item)
            yield(item2)
        }
        while (iter1.hasNext()) {
            val item = iter1.next()
            yield(item)
        }
        while (iter2.hasNext()) {
            val item2 = iter2.next()
            yield(item2)
        }
    }
}

    fun <T> Sequence<T>.window(size : Int) : Iterator<Sequence<T>> {
        return iterator{
            sequence{
                val iter = this@window.iterator()
                while(iter.hasNext()) {
                    for (i in 0..size) {
                        yield(iter.next())
                    }
                }
                return@sequence
            }
        }
    }


    @Test
    fun `Collapse with custom lazy collapse using yield`() {
        val actual : Sequence<Int> = sequenceOf(4,5,5,6,7,7,5,3,3,7,6,5).collapse()
        val expected = listOf(4,5,6,7,5,3,7,6,5)
        Assert.assertEquals(expected, actual.toList())
    }

    @Test
    fun Inter_leave_with_custom_lazy_interleave_using_yield() {
        val first = sequenceOf(2,5,3,6)
        val other = sequenceOf(9,5,8,3,null)
        val actual = first.interLeave(other)
        val expected = listOf(2,9,5,5,3,8,6,3,null)
        assertEquals(expected, actual.toList())
    }

    @Test
    fun Window_with_custum_lazy_using_yeild(){
        val actual:Iterator<Sequence<Int>> = sequenceOf(2,5,7,9,6,4,7,1)
            .window(3)
            .iterator()
        val expected = sequenceOf(
            listOf(2,5,7),
            listOf(9,6,4),
            listOf(7,1)
        )
            .iterator()
        while(expected.hasNext())
            assertEquals(expected.next(),actual.next())
    }
 }